services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    networks:
      - traefik_net
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - db
      - redis
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: >
      sh -c "if [ \"$NODE_ENV\" = 'development' ];
      then npx nodemon --legacy-watch server.js;
      else node server.js;
      fi"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_esq.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.api_esq.entrypoints=websecure"
      - "traefik.http.routers.api_esq.tls.certresolver=resolver"
      - "traefik.http.services.api_esq.loadbalancer.server.port=3000"


  db:
    image: mariadb:10.11
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - traefik_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      retries: 20
      timeout: 5s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    networks:
      - traefik_net
    env_file:
      - .env
    environment:
      PMA_HOST: db
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pma_esq.rule=Host(`${PMA_DOMAIN}`)"
      - "traefik.http.routers.pma_esq.entrypoints=websecure"
      - "traefik.http.routers.pma_esq.tls.certresolver=resolver"
      - "traefik.http.services.pma_esq.loadbalancer.server.port=80"

  redis:
    image: redis:7-alpine
    networks:
      - traefik_net
    env_file:
      - .env
    command: ["redis-server", "--appendonly", "yes", "--save", "60", "1000", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    restart: always

volumes:
  db_data:
  redis_data:

networks:
  traefik_net:
    external: true
